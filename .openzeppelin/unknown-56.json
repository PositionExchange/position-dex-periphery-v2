{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xCAB4aD0503c7705de472Ca34a8A8CEe11C6d4d71",
    "txHash": "0x33686d7423416cca03d1146fbec8dbf874e5dc945bfee1cc0d3de1077632afc0"
  },
  "proxies": [
    {
      "address": "0x3E2a76a7bfC4E973cE251B021bdd30220De8DBA4",
      "txHash": "0xe809bfb5c39cabe9bf3f45e457432718a031687df8e8d19f34e8ebfa2c4d6233",
      "kind": "transparent"
    },
    {
      "address": "0xC03308f323F99ce3c2749Ad33E20085AC951A91f",
      "txHash": "0x7effaf59cf73404541f0efadf1afd89c1da8784b943d0c78faf0dc1cbd21e118",
      "kind": "transparent"
    },
    {
      "address": "0xeB148700200fe9213ac0877F94E007D617c8edf4",
      "txHash": "0x72eb97935ff6c9767887f81b8e43b7289525e62b6f330f5ed421de0201b52820",
      "kind": "transparent"
    },
    {
      "address": "0x77a3A4b832763A34a9757c1A1279BE633222ce6b",
      "txHash": "0x11c83826c03e06c1411156bcf9811c92b12e74ae8bef230a5daee17bee51bb34",
      "kind": "transparent"
    },
    {
      "address": "0x0C193d9d76aC79386fB2949fd62F86576cF11F12",
      "txHash": "0x113beec320fdce68814f17a3b1cb98a721e8596e4a8ccab7789ea886c5630631",
      "kind": "transparent"
    }
  ],
  "impls": {
    "efb9c5e6bfbd70653acdcebcb46cf1291eee3974819e460558aa3394633d4736": {
      "address": "0x24b8432C00f794E37dfc26d657020e1B4670D6AC",
      "txHash": "0xd7f7d2e999c1b536b89d6dea159fe917bf3611b558332ba7439c711808bda16e",
      "layout": {
        "solcVersion": "0.8.9",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "51",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "spotHouse",
            "offset": 0,
            "slot": "201",
            "type": "t_address",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:7"
          },
          {
            "label": "positionLiquidity",
            "offset": 0,
            "slot": "202",
            "type": "t_address",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:9"
          },
          {
            "label": "pathPairManagers",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:12"
          },
          {
            "label": "allPairManager",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_struct(Pair)17915_storage)",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:14"
          },
          {
            "label": "allowedAddressAddPair",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:16"
          },
          {
            "label": "ownerPairManager",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_address)",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:19"
          },
          {
            "label": "stakingManagerOfPair",
            "offset": 0,
            "slot": "207",
            "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:22"
          },
          {
            "label": "feeShareAmm",
            "offset": 0,
            "slot": "208",
            "type": "t_uint32",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:26"
          },
          {
            "label": "positionRouter",
            "offset": 4,
            "slot": "208",
            "type": "t_address",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:27"
          },
          {
            "label": "mappingVersionTemplate",
            "offset": 0,
            "slot": "209",
            "type": "t_mapping(t_uint32,t_address)",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:29"
          },
          {
            "label": "latestVersion",
            "offset": 0,
            "slot": "210",
            "type": "t_uint32",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:30"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "211",
            "type": "t_array(t_uint256)49_storage",
            "contract": "SpotFactoryStorage",
            "src": "contracts/libraries/types/SpotFactoryStorage.sol:37"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_address))": {
            "label": "mapping(address => mapping(address => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Pair)17915_storage)": {
            "label": "mapping(address => struct ISpotFactory.Pair)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_address)": {
            "label": "mapping(uint32 => address)",
            "numberOfBytes": "32"
          },
          "t_struct(Pair)17915_storage": {
            "label": "struct ISpotFactory.Pair",
            "members": [
              {
                "label": "BaseAsset",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "QuoteAsset",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "44f1c6e954adaf16b45072df26cde9cef31d5f070aab5dacd9f77ee6288d787f": {
      "address": "0xDB39c01488cc3b41Bc8f278009eb5532eDBf1911",
      "txHash": "0x3e5f8765d78d5255f30bf748fedea0e29b97109b4b508c8e3c601ea185e956a0",
      "layout": {
        "solcVersion": "0.8.9",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "51",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "defaultFeePercentage",
            "offset": 0,
            "slot": "201",
            "type": "t_uint16",
            "contract": "StrategyFee",
            "src": "contracts/libraries/extensions/StrategyFee.sol:11"
          },
          {
            "label": "strategyFee",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_struct(FeeDiscount)17747_storage)dyn_storage",
            "contract": "StrategyFee",
            "src": "contracts/libraries/extensions/StrategyFee.sol:19"
          },
          {
            "label": "positionRouter",
            "offset": 0,
            "slot": "203",
            "type": "t_contract(IPositionRouter)16406",
            "contract": "BuyBackAndBurn",
            "src": "contracts/libraries/extensions/BuyBackAndBurn.sol:16"
          },
          {
            "label": "posiToken",
            "offset": 0,
            "slot": "204",
            "type": "t_contract(IERC20)3811",
            "contract": "BuyBackAndBurn",
            "src": "contracts/libraries/extensions/BuyBackAndBurn.sol:18"
          },
          {
            "label": "totalBurned",
            "offset": 0,
            "slot": "205",
            "type": "t_uint256",
            "contract": "BuyBackAndBurn",
            "src": "contracts/libraries/extensions/BuyBackAndBurn.sol:20"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "206",
            "type": "t_array(t_uint256)49_storage",
            "contract": "BuyBackAndBurn",
            "src": "contracts/libraries/extensions/BuyBackAndBurn.sol:96"
          },
          {
            "label": "spotFactory",
            "offset": 0,
            "slot": "255",
            "type": "t_contract(ISpotFactory)16753",
            "contract": "SpotHouseStorage",
            "src": "contracts/libraries/types/SpotHouseStorage.sol:11"
          },
          {
            "label": "WBNB",
            "offset": 0,
            "slot": "256",
            "type": "t_address",
            "contract": "SpotHouseStorage",
            "src": "contracts/libraries/types/SpotHouseStorage.sol:13"
          },
          {
            "label": "limitOrders",
            "offset": 0,
            "slot": "257",
            "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(Data)17554_storage)dyn_storage))",
            "contract": "SpotHouseStorage",
            "src": "contracts/libraries/types/SpotHouseStorage.sol:15"
          },
          {
            "label": "withdrawBNB",
            "offset": 0,
            "slot": "258",
            "type": "t_contract(IWithdrawBNB)17537",
            "contract": "SpotHouseStorage",
            "src": "contracts/libraries/types/SpotHouseStorage.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "259",
            "type": "t_array(t_uint256)49_storage",
            "contract": "SpotHouseStorage",
            "src": "contracts/libraries/types/SpotHouseStorage.sol:51"
          },
          {
            "label": "operator",
            "offset": 0,
            "slot": "308",
            "type": "t_address",
            "contract": "SpotHouseStorage",
            "src": "contracts/libraries/types/SpotHouseStorage.sol:53"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Data)17554_storage)dyn_storage": {
            "label": "struct SpotLimitOrder.Data[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(FeeDiscount)17747_storage)dyn_storage": {
            "label": "struct StrategyFee.FeeDiscount[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)3811": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IPositionRouter)16406": {
            "label": "contract IPositionRouter",
            "numberOfBytes": "20"
          },
          "t_contract(ISpotFactory)16753": {
            "label": "contract ISpotFactory",
            "numberOfBytes": "20"
          },
          "t_contract(IWithdrawBNB)17537": {
            "label": "contract IWithdrawBNB",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_struct(Data)17554_storage)dyn_storage)": {
            "label": "mapping(address => struct SpotLimitOrder.Data[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(Data)17554_storage)dyn_storage))": {
            "label": "mapping(address => mapping(address => struct SpotLimitOrder.Data[]))",
            "numberOfBytes": "32"
          },
          "t_struct(Data)17554_storage": {
            "label": "struct SpotLimitOrder.Data",
            "members": [
              {
                "label": "pip",
                "type": "t_uint128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "orderId",
                "type": "t_uint64",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "isBuy",
                "type": "t_bool",
                "offset": 24,
                "slot": "0"
              },
              {
                "label": "blockNumber",
                "type": "t_uint40",
                "offset": 25,
                "slot": "0"
              },
              {
                "label": "fee",
                "type": "t_uint16",
                "offset": 30,
                "slot": "0"
              },
              {
                "label": "quoteAmount",
                "type": "t_uint128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "baseAmount",
                "type": "t_uint128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(FeeDiscount)17747_storage": {
            "label": "struct StrategyFee.FeeDiscount",
            "members": [
              {
                "label": "minHold",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "maxHold",
                "type": "t_uint32",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "fee",
                "type": "t_uint16",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "0361f9d8847131c6a1e3dd8c76eefc43e4b7daad0aca36393c21039fa9d4ea57": {
      "address": "0x9cB01a8F73A2a89170Da855e5B932AF26c06FCc0",
      "txHash": "0x797da17550cf39537d275b5d3ade496cb999db79802ce19f372914727110217e",
      "layout": {
        "solcVersion": "0.8.9",
        "storage": [
          {
            "label": "concentratedLiquidity",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(Data)10438_storage)",
            "contract": "LiquidityManager",
            "src": "contracts/implement/LiquidityManager.sol:26"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "1",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "103",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "107",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "108",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:514"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "156",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "tokenID",
            "offset": 0,
            "slot": "202",
            "type": "t_uint256",
            "contract": "LiquidityManagerNFT",
            "src": "contracts/implement/LiquidityManagerNFT.sol:15"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "203",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "253",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "254",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "spotFactory",
            "offset": 0,
            "slot": "303",
            "type": "t_contract(ISpotFactory)9848",
            "contract": "PositionNondisperseLiquidity",
            "src": "contracts/PositionNondisperseLiquidity.sol:40"
          },
          {
            "label": "withdrawBNB",
            "offset": 0,
            "slot": "304",
            "type": "t_contract(IWithdrawBNB)9925",
            "contract": "PositionNondisperseLiquidity",
            "src": "contracts/PositionNondisperseLiquidity.sol:41"
          },
          {
            "label": "WBNB",
            "offset": 0,
            "slot": "305",
            "type": "t_address",
            "contract": "PositionNondisperseLiquidity",
            "src": "contracts/PositionNondisperseLiquidity.sol:42"
          },
          {
            "label": "counterParties",
            "offset": 0,
            "slot": "306",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "PositionNondisperseLiquidity",
            "src": "contracts/PositionNondisperseLiquidity.sol:44"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IMatchingEngineAMM)4130": {
            "label": "contract IMatchingEngineAMM",
            "numberOfBytes": "20"
          },
          "t_contract(ISpotFactory)9848": {
            "label": "contract ISpotFactory",
            "numberOfBytes": "20"
          },
          "t_contract(IWithdrawBNB)9925": {
            "label": "contract IWithdrawBNB",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Data)10438_storage)": {
            "label": "mapping(uint256 => struct UserLiquidity.Data)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Data)10438_storage": {
            "label": "struct UserLiquidity.Data",
            "members": [
              {
                "label": "liquidity",
                "type": "t_uint128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "indexedPipRange",
                "type": "t_uint32",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "feeGrowthBase",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "feeGrowthQuote",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "pool",
                "type": "t_contract(IMatchingEngineAMM)4130",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7e62375493268f1d41310e051629a03aa5e441082bdc483ee821b0abecdea100": {
      "address": "0x9DbC95cdfAD1484c384e8B2f8e15dd8cb068C857",
      "txHash": "0x02c69b05a3b6f09c8113b734ca3667a47d8364eb4665105b28d37383255a63a3",
      "layout": {
        "solcVersion": "0.8.9",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "51",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "factory",
            "offset": 0,
            "slot": "201",
            "type": "t_contract(ISpotFactory)12924",
            "contract": "PositionRouterStorage",
            "src": "contracts/libraries/types/PositionRouterStorage.sol:13"
          },
          {
            "label": "spotHouse",
            "offset": 0,
            "slot": "202",
            "type": "t_contract(ISpotHouse)12933",
            "contract": "PositionRouterStorage",
            "src": "contracts/libraries/types/PositionRouterStorage.sol:15"
          },
          {
            "label": "withdrawBNB",
            "offset": 0,
            "slot": "203",
            "type": "t_contract(IWithdrawBNB)13708",
            "contract": "PositionRouterStorage",
            "src": "contracts/libraries/types/PositionRouterStorage.sol:17"
          },
          {
            "label": "WBNB",
            "offset": 0,
            "slot": "204",
            "type": "t_address",
            "contract": "PositionRouterStorage",
            "src": "contracts/libraries/types/PositionRouterStorage.sol:19"
          },
          {
            "label": "uniSwapRouterV2",
            "offset": 0,
            "slot": "205",
            "type": "t_contract(IUniswapV2Router02)13631",
            "contract": "PositionRouterStorage",
            "src": "contracts/libraries/types/PositionRouterStorage.sol:21"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "206",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PositionRouterStorage",
            "src": "contracts/libraries/types/PositionRouterStorage.sol:28"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ISpotFactory)12924": {
            "label": "contract ISpotFactory",
            "numberOfBytes": "20"
          },
          "t_contract(ISpotHouse)12933": {
            "label": "contract ISpotHouse",
            "numberOfBytes": "20"
          },
          "t_contract(IUniswapV2Router02)13631": {
            "label": "contract IUniswapV2Router02",
            "numberOfBytes": "20"
          },
          "t_contract(IWithdrawBNB)13708": {
            "label": "contract IWithdrawBNB",
            "numberOfBytes": "20"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "14cdb9d89d9507a5354e835761685c2b0fb440caa0c475d5bde0ed82c0f6a3e6": {
      "address": "0x4031be99E25f80b9bDcF0EF4dE6c53ED1FC71Dc8",
      "txHash": "0xceda4b809658bc3f23a7e93037893154287334578f36c926f5a5e0a0401d5f9a",
      "layout": {
        "solcVersion": "0.8.9",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "vestingSchedule",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_mapping(t_enum(Frequency)6199,t_array(t_struct(VestingData)5855_storage)dyn_storage))",
            "contract": "VestingScheduleBase",
            "src": "@positionex/posi-token/contracts/VestingScheduleBase.sol:8"
          },
          {
            "label": "_isWhiteListVesting",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "VestingScheduleBase",
            "src": "@positionex/posi-token/contracts/VestingScheduleBase.sol:9"
          },
          {
            "label": "position",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IERC20)3463",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:45"
          },
          {
            "label": "posiTreasury",
            "offset": 0,
            "slot": "154",
            "type": "t_contract(IPosiTreasury)9696",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:46"
          },
          {
            "label": "positionNondisperseLiquidity",
            "offset": 0,
            "slot": "155",
            "type": "t_contract(IPositionNondisperseLiquidity)9708",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:49"
          },
          {
            "label": "devAddress",
            "offset": 0,
            "slot": "156",
            "type": "t_address",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:52"
          },
          {
            "label": "positionPerBlock",
            "offset": 0,
            "slot": "157",
            "type": "t_uint256",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:54"
          },
          {
            "label": "feeAddress",
            "offset": 0,
            "slot": "158",
            "type": "t_address",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:56"
          },
          {
            "label": "BONUS_MULTIPLIER",
            "offset": 0,
            "slot": "159",
            "type": "t_uint256",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:58"
          },
          {
            "label": "MAXIMUM_HARVEST_INTERVAL",
            "offset": 0,
            "slot": "160",
            "type": "t_uint256",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:60"
          },
          {
            "label": "poolInfo",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_struct(PoolInfo)10525_storage)",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:63"
          },
          {
            "label": "userInfo",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)10510_storage))",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:65"
          },
          {
            "label": "pools",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_address)dyn_storage",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:66"
          },
          {
            "label": "totalAllocPoint",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:68"
          },
          {
            "label": "startBlock",
            "offset": 0,
            "slot": "165",
            "type": "t_uint256",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:70"
          },
          {
            "label": "totalLockedUpRewards",
            "offset": 0,
            "slot": "166",
            "type": "t_uint256",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:72"
          },
          {
            "label": "posiStakingPid",
            "offset": 0,
            "slot": "167",
            "type": "t_uint256",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:74"
          },
          {
            "label": "positionReferral",
            "offset": 0,
            "slot": "168",
            "type": "t_contract(IPositionReferral)9735",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:77"
          },
          {
            "label": "referralCommissionRate",
            "offset": 20,
            "slot": "168",
            "type": "t_uint16",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:79"
          },
          {
            "label": "MAXIMUM_REFERRAL_COMMISSION_RATE",
            "offset": 22,
            "slot": "168",
            "type": "t_uint16",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:81"
          },
          {
            "label": "stakingMinted",
            "offset": 0,
            "slot": "169",
            "type": "t_uint256",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:83"
          },
          {
            "label": "harvestFeeShareRate",
            "offset": 0,
            "slot": "170",
            "type": "t_uint16",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:85"
          },
          {
            "label": "userNft",
            "offset": 0,
            "slot": "171",
            "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:88"
          },
          {
            "label": "nftOwnedIndex",
            "offset": 0,
            "slot": "172",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "PositionStakingDexManagerStorage",
            "src": "contracts/libraries/types/PositionStakingDexManagerStorage.sol:90"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(VestingData)5855_storage)dyn_storage": {
            "label": "struct VestingScheduleLogic.VestingData[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)3463": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IPosiTreasury)9696": {
            "label": "contract IPosiTreasury",
            "numberOfBytes": "20"
          },
          "t_contract(IPositionNondisperseLiquidity)9708": {
            "label": "contract IPositionNondisperseLiquidity",
            "numberOfBytes": "20"
          },
          "t_contract(IPositionReferral)9735": {
            "label": "contract IPositionReferral",
            "numberOfBytes": "20"
          },
          "t_enum(Frequency)6199": {
            "label": "enum VestingFrequencyHelper.Frequency",
            "members": [
              "Daily",
              "Weekly",
              "Monthly",
              "Bimonthly",
              "Quarterly",
              "Biannually"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(address => mapping(address => uint256[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)10510_storage))": {
            "label": "mapping(address => mapping(address => struct PositionStakingDexManagerStorage.UserInfo))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_enum(Frequency)6199,t_array(t_struct(VestingData)5855_storage)dyn_storage))": {
            "label": "mapping(address => mapping(enum VestingFrequencyHelper.Frequency => struct VestingScheduleLogic.VestingData[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(PoolInfo)10525_storage)": {
            "label": "mapping(address => struct PositionStakingDexManagerStorage.PoolInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserInfo)10510_storage)": {
            "label": "mapping(address => struct PositionStakingDexManagerStorage.UserInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_enum(Frequency)6199,t_array(t_struct(VestingData)5855_storage)dyn_storage)": {
            "label": "mapping(enum VestingFrequencyHelper.Frequency => struct VestingScheduleLogic.VestingData[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_struct(PoolInfo)10525_storage": {
            "label": "struct PositionStakingDexManagerStorage.PoolInfo",
            "members": [
              {
                "label": "poolId",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "allocPoint",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "accPositionPerShare",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "depositFeeBP",
                "type": "t_uint16",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "harvestInterval",
                "type": "t_uint128",
                "offset": 2,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(UserInfo)10510_storage": {
            "label": "struct PositionStakingDexManagerStorage.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "rewardLockedUp",
                "type": "t_uint128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "nextHarvestUntil",
                "type": "t_uint128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(VestingData)5855_storage": {
            "label": "struct VestingScheduleLogic.VestingData",
            "members": [
              {
                "label": "vestingTime",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint192",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint192": {
            "label": "uint192",
            "numberOfBytes": "24"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
